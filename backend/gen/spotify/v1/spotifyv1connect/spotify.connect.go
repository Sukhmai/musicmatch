// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: spotify/v1/spotify.proto

package spotifyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/sukhmai/spotify-match/gen/spotify/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SpotifyServiceName is the fully-qualified name of the SpotifyService service.
	SpotifyServiceName = "spotify.v1.SpotifyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SpotifyServiceSaveTopArtistsProcedure is the fully-qualified name of the SpotifyService's
	// SaveTopArtists RPC.
	SpotifyServiceSaveTopArtistsProcedure = "/spotify.v1.SpotifyService/SaveTopArtists"
	// SpotifyServiceGetAuthURLProcedure is the fully-qualified name of the SpotifyService's GetAuthURL
	// RPC.
	SpotifyServiceGetAuthURLProcedure = "/spotify.v1.SpotifyService/GetAuthURL"
	// SpotifyServiceExchangeTokenProcedure is the fully-qualified name of the SpotifyService's
	// ExchangeToken RPC.
	SpotifyServiceExchangeTokenProcedure = "/spotify.v1.SpotifyService/ExchangeToken"
	// SpotifyServiceGetUserCountProcedure is the fully-qualified name of the SpotifyService's
	// GetUserCount RPC.
	SpotifyServiceGetUserCountProcedure = "/spotify.v1.SpotifyService/GetUserCount"
	// SpotifyServiceSearchArtistsProcedure is the fully-qualified name of the SpotifyService's
	// SearchArtists RPC.
	SpotifyServiceSearchArtistsProcedure = "/spotify.v1.SpotifyService/SearchArtists"
	// SpotifyServiceSaveUserSelectedArtistsProcedure is the fully-qualified name of the
	// SpotifyService's SaveUserSelectedArtists RPC.
	SpotifyServiceSaveUserSelectedArtistsProcedure = "/spotify.v1.SpotifyService/SaveUserSelectedArtists"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	spotifyServiceServiceDescriptor                       = v1.File_spotify_v1_spotify_proto.Services().ByName("SpotifyService")
	spotifyServiceSaveTopArtistsMethodDescriptor          = spotifyServiceServiceDescriptor.Methods().ByName("SaveTopArtists")
	spotifyServiceGetAuthURLMethodDescriptor              = spotifyServiceServiceDescriptor.Methods().ByName("GetAuthURL")
	spotifyServiceExchangeTokenMethodDescriptor           = spotifyServiceServiceDescriptor.Methods().ByName("ExchangeToken")
	spotifyServiceGetUserCountMethodDescriptor            = spotifyServiceServiceDescriptor.Methods().ByName("GetUserCount")
	spotifyServiceSearchArtistsMethodDescriptor           = spotifyServiceServiceDescriptor.Methods().ByName("SearchArtists")
	spotifyServiceSaveUserSelectedArtistsMethodDescriptor = spotifyServiceServiceDescriptor.Methods().ByName("SaveUserSelectedArtists")
)

// SpotifyServiceClient is a client for the spotify.v1.SpotifyService service.
type SpotifyServiceClient interface {
	SaveTopArtists(context.Context, *connect.Request[v1.SaveTopArtistsRequest]) (*connect.Response[v1.SaveTopArtistsResponse], error)
	// GetAuthURL retrieves the URL to redirect the user to for authentication.
	GetAuthURL(context.Context, *connect.Request[v1.GetAuthURLRequest]) (*connect.Response[v1.GetAuthURLResponse], error)
	// ExchangeToken exchanges the authorization code for access and refresh tokens.
	ExchangeToken(context.Context, *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error)
	// GetUserCount retrieves the total number of users in the system.
	GetUserCount(context.Context, *connect.Request[v1.GetUserCountRequest]) (*connect.Response[v1.GetUserCountResponse], error)
	// SearchArtists searches the database for artists matching the query.
	SearchArtists(context.Context, *connect.Request[v1.SearchArtistsRequest]) (*connect.Response[v1.SearchArtistsResponse], error)
	// SaveUserSelectedArtists saves manually selected artists for a user.
	SaveUserSelectedArtists(context.Context, *connect.Request[v1.SaveUserSelectedArtistsRequest]) (*connect.Response[v1.SaveUserSelectedArtistsResponse], error)
}

// NewSpotifyServiceClient constructs a client for the spotify.v1.SpotifyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSpotifyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SpotifyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &spotifyServiceClient{
		saveTopArtists: connect.NewClient[v1.SaveTopArtistsRequest, v1.SaveTopArtistsResponse](
			httpClient,
			baseURL+SpotifyServiceSaveTopArtistsProcedure,
			connect.WithSchema(spotifyServiceSaveTopArtistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAuthURL: connect.NewClient[v1.GetAuthURLRequest, v1.GetAuthURLResponse](
			httpClient,
			baseURL+SpotifyServiceGetAuthURLProcedure,
			connect.WithSchema(spotifyServiceGetAuthURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exchangeToken: connect.NewClient[v1.ExchangeTokenRequest, v1.ExchangeTokenResponse](
			httpClient,
			baseURL+SpotifyServiceExchangeTokenProcedure,
			connect.WithSchema(spotifyServiceExchangeTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserCount: connect.NewClient[v1.GetUserCountRequest, v1.GetUserCountResponse](
			httpClient,
			baseURL+SpotifyServiceGetUserCountProcedure,
			connect.WithSchema(spotifyServiceGetUserCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchArtists: connect.NewClient[v1.SearchArtistsRequest, v1.SearchArtistsResponse](
			httpClient,
			baseURL+SpotifyServiceSearchArtistsProcedure,
			connect.WithSchema(spotifyServiceSearchArtistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		saveUserSelectedArtists: connect.NewClient[v1.SaveUserSelectedArtistsRequest, v1.SaveUserSelectedArtistsResponse](
			httpClient,
			baseURL+SpotifyServiceSaveUserSelectedArtistsProcedure,
			connect.WithSchema(spotifyServiceSaveUserSelectedArtistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// spotifyServiceClient implements SpotifyServiceClient.
type spotifyServiceClient struct {
	saveTopArtists          *connect.Client[v1.SaveTopArtistsRequest, v1.SaveTopArtistsResponse]
	getAuthURL              *connect.Client[v1.GetAuthURLRequest, v1.GetAuthURLResponse]
	exchangeToken           *connect.Client[v1.ExchangeTokenRequest, v1.ExchangeTokenResponse]
	getUserCount            *connect.Client[v1.GetUserCountRequest, v1.GetUserCountResponse]
	searchArtists           *connect.Client[v1.SearchArtistsRequest, v1.SearchArtistsResponse]
	saveUserSelectedArtists *connect.Client[v1.SaveUserSelectedArtistsRequest, v1.SaveUserSelectedArtistsResponse]
}

// SaveTopArtists calls spotify.v1.SpotifyService.SaveTopArtists.
func (c *spotifyServiceClient) SaveTopArtists(ctx context.Context, req *connect.Request[v1.SaveTopArtistsRequest]) (*connect.Response[v1.SaveTopArtistsResponse], error) {
	return c.saveTopArtists.CallUnary(ctx, req)
}

// GetAuthURL calls spotify.v1.SpotifyService.GetAuthURL.
func (c *spotifyServiceClient) GetAuthURL(ctx context.Context, req *connect.Request[v1.GetAuthURLRequest]) (*connect.Response[v1.GetAuthURLResponse], error) {
	return c.getAuthURL.CallUnary(ctx, req)
}

// ExchangeToken calls spotify.v1.SpotifyService.ExchangeToken.
func (c *spotifyServiceClient) ExchangeToken(ctx context.Context, req *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error) {
	return c.exchangeToken.CallUnary(ctx, req)
}

// GetUserCount calls spotify.v1.SpotifyService.GetUserCount.
func (c *spotifyServiceClient) GetUserCount(ctx context.Context, req *connect.Request[v1.GetUserCountRequest]) (*connect.Response[v1.GetUserCountResponse], error) {
	return c.getUserCount.CallUnary(ctx, req)
}

// SearchArtists calls spotify.v1.SpotifyService.SearchArtists.
func (c *spotifyServiceClient) SearchArtists(ctx context.Context, req *connect.Request[v1.SearchArtistsRequest]) (*connect.Response[v1.SearchArtistsResponse], error) {
	return c.searchArtists.CallUnary(ctx, req)
}

// SaveUserSelectedArtists calls spotify.v1.SpotifyService.SaveUserSelectedArtists.
func (c *spotifyServiceClient) SaveUserSelectedArtists(ctx context.Context, req *connect.Request[v1.SaveUserSelectedArtistsRequest]) (*connect.Response[v1.SaveUserSelectedArtistsResponse], error) {
	return c.saveUserSelectedArtists.CallUnary(ctx, req)
}

// SpotifyServiceHandler is an implementation of the spotify.v1.SpotifyService service.
type SpotifyServiceHandler interface {
	SaveTopArtists(context.Context, *connect.Request[v1.SaveTopArtistsRequest]) (*connect.Response[v1.SaveTopArtistsResponse], error)
	// GetAuthURL retrieves the URL to redirect the user to for authentication.
	GetAuthURL(context.Context, *connect.Request[v1.GetAuthURLRequest]) (*connect.Response[v1.GetAuthURLResponse], error)
	// ExchangeToken exchanges the authorization code for access and refresh tokens.
	ExchangeToken(context.Context, *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error)
	// GetUserCount retrieves the total number of users in the system.
	GetUserCount(context.Context, *connect.Request[v1.GetUserCountRequest]) (*connect.Response[v1.GetUserCountResponse], error)
	// SearchArtists searches the database for artists matching the query.
	SearchArtists(context.Context, *connect.Request[v1.SearchArtistsRequest]) (*connect.Response[v1.SearchArtistsResponse], error)
	// SaveUserSelectedArtists saves manually selected artists for a user.
	SaveUserSelectedArtists(context.Context, *connect.Request[v1.SaveUserSelectedArtistsRequest]) (*connect.Response[v1.SaveUserSelectedArtistsResponse], error)
}

// NewSpotifyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSpotifyServiceHandler(svc SpotifyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	spotifyServiceSaveTopArtistsHandler := connect.NewUnaryHandler(
		SpotifyServiceSaveTopArtistsProcedure,
		svc.SaveTopArtists,
		connect.WithSchema(spotifyServiceSaveTopArtistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	spotifyServiceGetAuthURLHandler := connect.NewUnaryHandler(
		SpotifyServiceGetAuthURLProcedure,
		svc.GetAuthURL,
		connect.WithSchema(spotifyServiceGetAuthURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	spotifyServiceExchangeTokenHandler := connect.NewUnaryHandler(
		SpotifyServiceExchangeTokenProcedure,
		svc.ExchangeToken,
		connect.WithSchema(spotifyServiceExchangeTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	spotifyServiceGetUserCountHandler := connect.NewUnaryHandler(
		SpotifyServiceGetUserCountProcedure,
		svc.GetUserCount,
		connect.WithSchema(spotifyServiceGetUserCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	spotifyServiceSearchArtistsHandler := connect.NewUnaryHandler(
		SpotifyServiceSearchArtistsProcedure,
		svc.SearchArtists,
		connect.WithSchema(spotifyServiceSearchArtistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	spotifyServiceSaveUserSelectedArtistsHandler := connect.NewUnaryHandler(
		SpotifyServiceSaveUserSelectedArtistsProcedure,
		svc.SaveUserSelectedArtists,
		connect.WithSchema(spotifyServiceSaveUserSelectedArtistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/spotify.v1.SpotifyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SpotifyServiceSaveTopArtistsProcedure:
			spotifyServiceSaveTopArtistsHandler.ServeHTTP(w, r)
		case SpotifyServiceGetAuthURLProcedure:
			spotifyServiceGetAuthURLHandler.ServeHTTP(w, r)
		case SpotifyServiceExchangeTokenProcedure:
			spotifyServiceExchangeTokenHandler.ServeHTTP(w, r)
		case SpotifyServiceGetUserCountProcedure:
			spotifyServiceGetUserCountHandler.ServeHTTP(w, r)
		case SpotifyServiceSearchArtistsProcedure:
			spotifyServiceSearchArtistsHandler.ServeHTTP(w, r)
		case SpotifyServiceSaveUserSelectedArtistsProcedure:
			spotifyServiceSaveUserSelectedArtistsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSpotifyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSpotifyServiceHandler struct{}

func (UnimplementedSpotifyServiceHandler) SaveTopArtists(context.Context, *connect.Request[v1.SaveTopArtistsRequest]) (*connect.Response[v1.SaveTopArtistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("spotify.v1.SpotifyService.SaveTopArtists is not implemented"))
}

func (UnimplementedSpotifyServiceHandler) GetAuthURL(context.Context, *connect.Request[v1.GetAuthURLRequest]) (*connect.Response[v1.GetAuthURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("spotify.v1.SpotifyService.GetAuthURL is not implemented"))
}

func (UnimplementedSpotifyServiceHandler) ExchangeToken(context.Context, *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("spotify.v1.SpotifyService.ExchangeToken is not implemented"))
}

func (UnimplementedSpotifyServiceHandler) GetUserCount(context.Context, *connect.Request[v1.GetUserCountRequest]) (*connect.Response[v1.GetUserCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("spotify.v1.SpotifyService.GetUserCount is not implemented"))
}

func (UnimplementedSpotifyServiceHandler) SearchArtists(context.Context, *connect.Request[v1.SearchArtistsRequest]) (*connect.Response[v1.SearchArtistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("spotify.v1.SpotifyService.SearchArtists is not implemented"))
}

func (UnimplementedSpotifyServiceHandler) SaveUserSelectedArtists(context.Context, *connect.Request[v1.SaveUserSelectedArtistsRequest]) (*connect.Response[v1.SaveUserSelectedArtistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("spotify.v1.SpotifyService.SaveUserSelectedArtists is not implemented"))
}
